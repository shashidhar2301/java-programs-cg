package com.beginner;

import java.util.HashMap;
import java.util.Map;

public class FractionWorking {
	
	public static String calculateFraction(int num, int den)
    {
        if (num == 0)
            return "0"; // if numerator is zero
        if (den == 0)
            return ""; // if denominator is zero
 
        // result StringBuilder
 
        StringBuilder result = new StringBuilder();
        if ((num < 0) ^ (den < 0))
            result.append("-"); // check -ve sign
 
        // absolute values of num and den
 
        num = Math.abs(num);
        den = Math.abs(den);
 
        long quo = num / den; // Quotient
        long rem = num % den * 10; // calculating remainder
 
        result.append(
            String.valueOf(quo)); // appending quotient
        if (rem == 0)
            return result
                .toString(); // return if remainder is 0
 
        // if remainder is not zero, continue
 
        result.append(".");
        Map<Long, Integer> m
            = new HashMap<>(); // map for storing remainder
                               // and the indexes of the
                               // appropriate decimal in
                               // stringbuilder
 
        while (rem != 0) {
 
            if (m.containsKey(rem)) {
 
                // if the rem is already present, find the
                // index and append ( )
 
                int index = m.get(rem);
                String part1 = result.substring(0, index);
                String part2 = "("
                               + result.substring(
                                   index, result.length())
                               + ")";
                return part1 + part2;
            }
 
            // continue updating the map and appending quo
            // which was generated by dividing rem with den
 
            m.put(rem, result.length());
            quo = rem / den;
            result.append(String.valueOf(quo));
 
            // update rem
            rem = (rem % den) * 10;
        }
        return result.toString();
    }
	

    public static void main(String[] args) {
    	int num = 1;
        int den = 3;

        String resString1 = fractionToDecimal(num, den);

        num = 1;
        den = 6;

      //  String resString2 = fractionToDecimal(num, den);

        System.out.println(resString1);
      //  System.out.println(resString2);
	}
    
    public static String fractionToDecimal(int numerator, int denominator) {
        // Check for zero numerator which means the result is 0
        if (numerator == 0) {
            return "0";
        }

        // StringBuilder to build the final string result
        StringBuilder resultBuilder = new StringBuilder();

        // Determine the sign of the result (neg if numerator XOR denominator is negative)
        boolean isNegative = (numerator > 0) ^ (denominator > 0);
        resultBuilder.append(isNegative ? "-" : "");

        // Convert to long to prevent integer overflow
        long num = Math.abs((long) numerator);
        long denom = Math.abs((long) denominator);

        // Append the integer part of the quotient to the result string
        resultBuilder.append(num / denom);
        num %= denom;  // Get the remainder

        // If there is no remainder, we can return the result as it's not a fraction
        if (num == 0) {
            return resultBuilder.toString();
        }

        // Fraction part starts after the decimal point
        resultBuilder.append(".");

        // Map to store already seen remainders and their positions in resultBuilder
        Map<Long, Integer> remainderPositions = new HashMap<>();

        // Loop until no remainder or repeated remainder is found
        while (num != 0) {
            remainderPositions.put(num, resultBuilder.length());
            num *= 10; // Multiply by 10 to get the numerator for next digit
            resultBuilder.append(num / denom); // Append the quotient digit
            num %= denom;  // Get the new remainder

            // Check if this remainder has been seen before
            if (remainderPositions.containsKey(num)) {
                // Insert the opening parenthesis at the position of the first occurrence of this remainder
                int index = remainderPositions.get(num);
                resultBuilder.insert(index, "(");
                // Append closing parenthesis at the end of the result string
                resultBuilder.append(")");
                break;
            }
        }
        // Convert the StringBuilder to a string and return it
        return resultBuilder.toString();
    }

}
